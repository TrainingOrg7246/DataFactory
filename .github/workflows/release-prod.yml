# .github/workflows/release-prod-adf.yml
name: ADF Prod Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release Tag to Deploy (e.g., v1.0.0)'
        required: true
        type: string
      test_workflow_run_id:
        description: 'ID of the successful Test deployment workflow run (to download artifacts from)'
        required: true
        type: string # This will be the run ID of the successful Test workflow
      # No longer need commit_sha as we're using run_id for artifact name
      # commit_sha:
      #   description: 'Commit SHA from the successful Test deployment workflow run'
      #   required: true
      #   type: string 

env:
  # General Environment Variables - ADJUST THESE TO YOUR ACTUAL ADF NAMES AND RESOURCE GROUPS
  ADF_RESOURCE_GROUP_PROD: 'rg-prod'       # Your Prod ADF Resource Group (e.g., 'your-prod-rg')
  ADF_NAME_PROD: 'prod-adf-vikash'            # Your Prod ADF Name (The ACTUAL name of your Prod ADF instance) (e.g., 'your-prod-adf')
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
  
  ADF_DEV_SUBFOLDER_NAME: "dev-adf-vikash" # The name of your DEV ADF instance (where templates were generated)

permissions:
  id-token: write # Required for OpenID Connect (OIDC) authentication
  contents: read  # Required to download artifacts

jobs:
  deploy-prod:
    name: Deploy to PROD
    runs-on: ubuntu-latest
    environment: prod  # Links to your 'prod' GitHub environment for secrets and protection rules

    steps:
    # --- MODIFIED STEP: Download Artifacts (Changed name to match upload) ---
    - name: Download ARM templates from Test workflow run
      uses: actions/download-artifact@v4
      with:
        name: adf-arm-templates-run-${{ github.event.inputs.test_workflow_run_id }} # Use run_id in the name
        path: adf_publish_repo/${{ env.ADF_DEV_SUBFOLDER_NAME }} 
        run-id: ${{ github.event.inputs.test_workflow_run_id }}
        repository: ${{ github.repository }} 

    - name: Verify downloaded files
      run: |
        echo "Listing downloaded contents in adf_publish_repo/${{ env.ADF_DEV_SUBFOLDER_NAME }}:"
        ls -R adf_publish_repo/${{ env.ADF_DEV_SUBFOLDER_NAME }}
        if [ ! -f "adf_publish_repo/${{ env.ADF_DEV_SUBFOLDER_NAME }}/ARMTemplateForFactory.json" ]; then
          echo "Error: ARMTemplateForFactory.json not found after download."
          exit 1
        fi
        if [ ! -f "adf_publish_repo/${{ env.ADF_DEV_SUBFOLDER_NAME }}/ARMTemplateParametersForFactory.json" ]; then
          echo "Error: ARMTemplateParametersForFactory.json not found after download."
          exit 1
        fi

    - name: Prepare ARM Template Parameters for Prod Environment
      run: |
        BASE_PARAMS_FILE="adf_publish_repo/${{ env.ADF_DEV_SUBFOLDER_NAME }}/ARMTemplateParametersForFactory.json"
        TEMP_PARAMS_FILE="adf_publish_repo/${{ env.ADF_DEV_SUBFOLDER_NAME }}/ARMTemplateParametersForFactory.temp.json"
        
        sudo apt-get update && sudo apt-get install -y jq
        
        jq --arg new_adf_name "${{ env.ADF_NAME_PROD }}" \
           '.parameters.factoryName.value = $new_adf_name' \
           "$BASE_PARAMS_FILE" > "$TEMP_PARAMS_FILE"
        
        mv "$TEMP_PARAMS_FILE" "$BASE_PARAMS_FILE"
        echo "Modified ARMTemplateParametersForFactory.json for Prod environment. New ADF name: ${{ env.ADF_NAME_PROD }}"
      
    - name: Azure Login (Prod)
      uses: azure/login@v1 
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID_PROD }}   
        tenant-id: ${{ secrets.AZURE_TENANT_ID_PROD }}   
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }} 

    - name: Deploy Azure Data Factory (Prod)
      run: |
        ADF_ARM_TEMPLATE_PATH="adf_publish_repo/${{ env.ADF_DEV_SUBFOLDER_NAME }}/ARMTemplateForFactory.json"
        ADF_ARM_PARAMETERS_PATH="adf_publish_repo/${{ env.ADF_DEV_SUBFOLDER_NAME }}/ARMTemplateParametersForFactory.json" 
        
        echo "Attempting to deploy ARM template from: $ADF_ARM_TEMPLATE_PATH"
        echo "Starting incremental deployment to Prod ADF: ${{ env.ADF_NAME_PROD }} for release ${{ github.event.inputs.release_tag }}"
        
        az deployment group create \
          --resource-group ${{ env.ADF_RESOURCE_GROUP_PROD }} \
          --template-file "$ADF_ARM_TEMPLATE_PATH" \
          --parameters "$ADF_ARM_PARAMETERS_PATH" \
          --name "ADF-Prod-Release-${{ github.event.inputs.release_tag }}-${{ github.run_number }}" \
          --mode Incremental 

    - name: Post-Deployment Steps (Prod)
      run: |
        echo "Prod deployment for release ${{ github.event.inputs.release_tag }} completed successfully!"
